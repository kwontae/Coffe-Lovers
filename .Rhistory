urllist <- sqbills[,1]
bills <- select(bills, results.bill_id, results.introduced_on, results.official_title) %>%
mutate(URLs = urllist) %>%
arrange(results.introduced_on)
urllist <- sqbills[ ,1]
urllist <- sqbills[,1]
urllist <- sqbills[ ,1]
sqbills <- select(sqbills, results.urls)
urllist <- sqbills[ ,1]
View(urllist)
urllist <- unlist(sqbills)
sqbills <- unlist(sqbills)
knitr::opts_chunk$set(echo = TRUE)
library('httr')
library('jsonlite')
library('knitr')
library('dplyr')
#-------------------------------------------------------------------
# Local representatives**
# Query and Api Request
response1 <- GET("https://congress.api.sunlightfoundation.com/legislators/locate?zip=11216")
RepSenZip <- as.data.frame(fromJSON(content(response1, 'text')))
result1 <- paste0(RepSenZip$results.first_name," ", RepSenZip$results.last_name, " (", RepSenZip$results.state, "-", RepSenZip$results.party, "). Phone: ", RepSenZip$results.phone)
#-------------------------------------------------------------------
# Congregational Bills**
# Query and Api Request
search.query <- list(query = "health", per_page = 25) #!!!!!!!!!!!
response2 <- GET('https://congress.api.sunlightfoundation.com/bills/search?', query = search.query)
squery <- list(query = "health", per_page = 25, fields = "urls.congress")
squeryRes <- GET('https://congress.api.sunlightfoundation.com/bills/search?', query = squery)
# Set info gathered from the api into a dataframe
bills <- as.data.frame(fromJSON(content(response2, 'text')))
sqbills <- as.data.frame(fromJSON(content(squeryRes, 'text')))
# Selecting columns that we only need
sqbills <- select(sqbills, results.urls)
sqbills <- unlist(sqbills)
bills <- select(bills, results.bill_id, results.introduced_on, results.official_title) %>%
mutate(URLs = sqbills) %>%
arrange(results.introduced_on)
# Resetting the column names
colnames(bills) <- c("Bill ID", "Date Introduced", "Official Title", "Links")
#-------------------------------------------------------------------
# Voting on Issue**
# Search query based on senate and congress 115 (current days)
search.query2 <- list(chamber = 'senate', congress = 115)
response3 <- GET('https://congress.api.sunlightfoundation.com/amendments', query = search.query2)
amendments <- as.data.frame(fromJSON(content(response3, 'text')))
# Search for the roll id of Bill ID: S.Con.Res3
search.query3 <- list(bill_id = 'sconres3-115')
response4 <- GET('https://congress.api.sunlightfoundation.com/votes', query = search.query3)
# Set bills2 as a dataframe
bills2 <- as.data.frame(fromJSON(content(response4, 'text')))
# Setting up the variable 'rollid'
rollid <- 's20-2017'
# Getting individual voters
search.query4 <- list(bill_id = 'sconres3-115', fields = "voters")
response5 <- GET('https://congress.api.sunlightfoundation.com/votes', query = search.query4)
# Adding a column with fullname
voters.as.data.frame <- mutate(voters.as.data.frame, VotersFullName = paste(voter.first_name, voter.last_name )) # Code block from the assignment description
knitr::opts_chunk$set(echo = TRUE)
library('httr')
library('jsonlite')
library('knitr')
library('dplyr')
#-------------------------------------------------------------------
# Local representatives**
# Query and Api Request
response1 <- GET("https://congress.api.sunlightfoundation.com/legislators/locate?zip=11216")
RepSenZip <- as.data.frame(fromJSON(content(response1, 'text')))
result1 <- paste0(RepSenZip$results.first_name," ", RepSenZip$results.last_name, " (", RepSenZip$results.state, "-", RepSenZip$results.party, "). Phone: ", RepSenZip$results.phone)
#-------------------------------------------------------------------
# Congregational Bills**
# Query and Api Request
search.query <- list(query = "health", per_page = 25) #!!!!!!!!!!!
response2 <- GET('https://congress.api.sunlightfoundation.com/bills/search?', query = search.query)
squery <- list(query = "health", per_page = 25, fields = "urls.congress")
squeryRes <- GET('https://congress.api.sunlightfoundation.com/bills/search?', query = squery)
# Set info gathered from the api into a dataframe
bills <- as.data.frame(fromJSON(content(response2, 'text')))
sqbills <- as.data.frame(fromJSON(content(squeryRes, 'text')))
# Selecting columns that we only need
sqbills <- select(sqbills, results.urls)
sqbills <- unlist(sqbills)
bills <- select(bills, results.bill_id, results.introduced_on, results.official_title) %>%
mutate(URLs = sqbills) %>%
arrange(results.introduced_on)
# Resetting the column names
colnames(bills) <- c("Bill ID", "Date Introduced", "Official Title", "Links")
#-------------------------------------------------------------------
# Voting on Issue**
# Search query based on senate and congress 115 (current days)
search.query2 <- list(chamber = 'senate', congress = 115)
response3 <- GET('https://congress.api.sunlightfoundation.com/amendments', query = search.query2)
amendments <- as.data.frame(fromJSON(content(response3, 'text')))
# Search for the roll id of Bill ID: S.Con.Res3
search.query3 <- list(bill_id = 'sconres3-115')
response4 <- GET('https://congress.api.sunlightfoundation.com/votes', query = search.query3)
# Set bills2 as a dataframe
bills2 <- as.data.frame(fromJSON(content(response4, 'text')))
# Setting up the variable 'rollid'
rollid <- 's20-2017'
# Getting individual voters
search.query4 <- list(bill_id = 'sconres3-115', fields = "voters")
response5 <- GET('https://congress.api.sunlightfoundation.com/votes', query = search.query4)
# Code block from the assignment description
request.body.as.list <- content(response5) # put a variable for info from GET()
voters.list <- request.body.as.list$results[[1]]$voters # Gets the voters of the first row/column of results tab from the list
names(voters.list) <- NULL #remove the names attribute in the voters.list
voters.json <- toJSON(voters.list) #convert voters.list to JSON
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE)) #flatten the data from voters.json file that has been converted to r from JSON
# Adding a column with fullname
voters.as.data.frame <- mutate(voters.as.data.frame, VotersFullName = paste(voter.first_name, voter.last_name ))
# Selecting only the information that we need
individual <- select(voters.as.data.frame, VotersFullName, voter.party, vote)
# Changing the Column names of the individual dataframe so its legible
colnames(individual) <- c("Full Name", "Voter's Party", "Votes")
#-------------------------------------------------------------------
# Party Votes**
# Finding how many voters are in each party
partygroup <- select(voters.as.data.frame, VotersFullName, voter.party, vote) %>%
group_by(unlist(voter.party)) %>%
summarise(n = n())
# Majority Picks
picks <- c("Yea", "Nay")
partygroup[ , "Majority Pick"] <- picks
# Variables for vote choices.
R <- filter(voters.as.data.frame, voter.party == 'R')
NR <- nrow(R)
ChamberR <- filter(R, voter.chamber == "house")
NChamberR <- nrow(ChamberR)
D <- filter(voters.as.data.frame, voter.party == 'D')
ND <- nrow(D)
ChamberD <- filter(D, voter.chamber == "house")
NChamberD <- nrow(ChamberD)
RY <- filter(R, vote == "Yea")
NRY <- nrow(RY)
RNV <- filter(R, vote == "Not Voting")
NRNV <- nrow(RNV)
DY <- filter(D, vote == "Yea")
NDY <- nrow(DY)
DNV <- filter(D, vote == "Not Voting")
NDNV <- nrow(DNV)
# Number of picks for each
Npicks <- c(NDY, NR - (NRY + NRNV))
partygroup[ , "# Made Same Vote"] <- Npicks
# Number of people in the House Chamber
NChamber <- c(NChamberD, NChamberR)
partygroup[, "# in House Chamber"] <- NChamber
colnames(partygroup) <- c("Party Name", "Total Voter #", "Majority Vote", "# Made Same vote", "# in House Chamber")
knitr::opts_chunk$set(echo = TRUE)
library('httr')
library('jsonlite')
library('knitr')
library('dplyr')
# Query and Api Request
response1 <- GET("https://congress.api.sunlightfoundation.com/legislators/locate?zip=11216")
RepSenZip <- as.data.frame(fromJSON(content(response1, 'text')))
result1 <- paste0(RepSenZip$results.first_name," ", RepSenZip$results.last_name, " (", RepSenZip$results.state, "-", RepSenZip$results.party, "). Phone: ", RepSenZip$results.phone)
search.query <- list(query = "health", per_page = 25) #!!!!!!!!!!!
response2 <- GET('https://congress.api.sunlightfoundation.com/bills/search?', query = search.query)
bills <- as.data.frame(fromJSON(content(response2, 'text')))
bills <- flatten(bills)
bills <- select(bills, results.bill_id, results.introduced_on, results.official_title, results.urls.congress)
View(bills)
bills <- select(bills, results.bill_id, results.introduced_on, results.official_title, results.urls.congress) %>%
arrange(results.introduced_on)
colnames(bills) <- c("Bill ID", "Date Introduced", "Official Title", "Links")
knitr::opts_chunk$set(echo = TRUE)
library('httr')
library('jsonlite')
library('knitr')
library('dplyr')
#-------------------------------------------------------------------
# Local representatives**
# Query and Api Request
response1 <- GET("https://congress.api.sunlightfoundation.com/legislators/locate?zip=11216")
RepSenZip <- as.data.frame(fromJSON(content(response1, 'text')))
result1 <- paste0(RepSenZip$results.first_name," ", RepSenZip$results.last_name, " (", RepSenZip$results.state, "-", RepSenZip$results.party, "). Phone: ", RepSenZip$results.phone)
#-------------------------------------------------------------------
# Congregational Bills**
# Query and Api Request
search.query <- list(query = "health", per_page = 25) #!!!!!!!!!!!
response2 <- GET('https://congress.api.sunlightfoundation.com/bills/search?', query = search.query)
# Set info gathered from the api into a dataframe
bills <- as.data.frame(fromJSON(content(response2, 'text')))
bills <- flatten(bills)
# Selecting the informations that we need
bills <- select(bills, results.bill_id, results.introduced_on, results.official_title, results.urls.congress) %>%
arrange(results.introduced_on)
# Resetting the column names
colnames(bills) <- c("Bill ID", "Date Introduced", "Official Title", "Links")
#-------------------------------------------------------------------
# Voting on Issue**
# Search query based on senate and congress 115 (current days)
search.query2 <- list(chamber = 'senate', congress = 115)
response3 <- GET('https://congress.api.sunlightfoundation.com/amendments', query = search.query2)
amendments <- as.data.frame(fromJSON(content(response3, 'text')))
# Search for the roll id of Bill ID: S.Con.Res3
search.query3 <- list(bill_id = 'sconres3-115')
response4 <- GET('https://congress.api.sunlightfoundation.com/votes', query = search.query3)
# Set bills2 as a dataframe
bills2 <- as.data.frame(fromJSON(content(response4, 'text')))
# Setting up the variable 'rollid'
rollid <- 's20-2017'
# Getting individual voters
search.query4 <- list(bill_id = 'sconres3-115', fields = "voters")
response5 <- GET('https://congress.api.sunlightfoundation.com/votes', query = search.query4)
# Code block from the assignment description
request.body.as.list <- content(response5) # put a variable for info from GET()
voters.list <- request.body.as.list$results[[1]]$voters # Gets the voters of the first row/column of results tab from the list
names(voters.list) <- NULL #remove the names attribute in the voters.list
voters.json <- toJSON(voters.list) #convert voters.list to JSON
voters.as.data.frame <- flatten(fromJSON(voters.json, flatten=TRUE)) #flatten the data from voters.json file that has been converted to r from JSON
# Adding a column with fullname
voters.as.data.frame <- mutate(voters.as.data.frame, VotersFullName = paste(voter.first_name, voter.last_name ))
# Selecting only the information that we need
individual <- select(voters.as.data.frame, VotersFullName, voter.party, vote)
# Changing the Column names of the individual dataframe so its legible
colnames(individual) <- c("Full Name", "Voter's Party", "Votes")
#-------------------------------------------------------------------
# Party Votes**
# Finding how many voters are in each party
partygroup <- select(voters.as.data.frame, VotersFullName, voter.party, vote) %>%
group_by(unlist(voter.party)) %>%
summarise(n = n())
# Majority Picks
picks <- c("Yea", "Nay")
partygroup[ , "Majority Pick"] <- picks
# Variables for vote choices.
R <- filter(voters.as.data.frame, voter.party == 'R')
NR <- nrow(R)
ChamberR <- filter(R, voter.chamber == "house")
NChamberR <- nrow(ChamberR)
D <- filter(voters.as.data.frame, voter.party == 'D')
ND <- nrow(D)
ChamberD <- filter(D, voter.chamber == "house")
NChamberD <- nrow(ChamberD)
RY <- filter(R, vote == "Yea")
NRY <- nrow(RY)
RNV <- filter(R, vote == "Not Voting")
NRNV <- nrow(RNV)
DY <- filter(D, vote == "Yea")
NDY <- nrow(DY)
DNV <- filter(D, vote == "Not Voting")
NDNV <- nrow(DNV)
# Number of picks for each
Npicks <- c(NDY, NR - (NRY + NRNV))
partygroup[ , "# Made Same Vote"] <- Npicks
# Number of people in the House Chamber
NChamber <- c(NChamberD, NChamberR)
partygroup[, "# in House Chamber"] <- NChamber
colnames(partygroup) <- c("Party Name", "Total Voter #", "Majority Vote", "# Made Same vote", "# in House Chamber")
contributors <- c("Kyle Simpson", "Sojin Park", "Taehyun Kwon", "Mitesh Goyal")
# install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
survey.data <- read.csv("./data/intro-survey.csv", stringsAsFactors = FALSE)
View(survey.data)
colnames(survey.data)
survey.data <- read.csv("./data/intro-survey.csv", stringsAsFactors = FALSE)
View(survey.data)
survey.data <- select(survey.data, Command.Line.Experience, Version.Control.Experience, Markdown.Experience, R.Language.Experience, Web.Programming.Experience)
survey.data <- select(survey.data, Command.Line.Experience, Version.Control.Experience, Markdown.Experience, R.Language.Experience, Web.Programming.Experience) %>%
# Command.Line.Experience
group_by(Command.Line.Experience) %>%
summarise(n = n())
View(survey.data)
survey.data <- read.csv("./data/intro-survey.csv", stringsAsFactors = FALSE)
survey.data <- select(survey.data, Command.Line.Experience, Version.Control.Experience, Markdown.Experience, R.Language.Experience, Web.Programming.Experience)
command.line <- group_by(survey.data, Command.Line.Experience) %>%
summarise(n = n())
command.line <- group_by(survey.data, Command.Line.Experience) %>%
summarise(n = n()) %>%
select(n)
View(command.line)
command.line <- group_by(survey.data, Command.Line.Experience) %>%
summarise(n = n())
survey.data <- select(survey.data, Command.Line.Experience, Version.Control.Experience, Markdown.Experience, R.Language.Experience, Web.Programming.Experience)
# Command.Line.Experience
command.line <- group_by(survey.data, Command.Line.Experience) %>%
summarise(n = n())
# Version.Control.Experience
version.control - group_by(survey.data, Version.Control.Experience) %>%
summarise(n = n()) %>%
select(n)
version.control <- group_by(survey.data, Version.Control.Experience) %>%
summarise(n = n()) %>%
select(n)
markdown <- group_by(survey.data, Markdown.Experience) %>%
summarise(n = n()) %>%
select(n)
r.language <- group_by(survey.data, R.Language.Experience) %>%
summarise(n = n()) %>%
select(n)
web.programming <- group_by(survey.data, Web.Programming.Experience) %>%
summarise(n = n()) %>%
select(n)
View(r.language)
r.language <- group_by(survey.data, R.Language.Experience) %>%
summarise(n = n())
View(r.language)
View(command.line)
web.programming <- group_by(survey.data, Web.Programming.Experience) %>%
summarise(n = n()) %>%
mutate(r.language)
r.language <- group_by(survey.data, R.Language.Experience) %>%
summarise(n = n()) %>%
select(n)
web.programming <- group_by(survey.data, Web.Programming.Experience) %>%
summarise(n = n()) %>%
mutate(r.language)
web.programming <- group_by(survey.data, Web.Programming.Experience) %>%
summarise(n = n()) %>%
mutate(markdown)
web.programming <- group_by(survey.data, Web.Programming.Experience) %>%
summarise(n = n()) %>%
mutate(markdown)
markdown <- markdown[,1]
markdown <- markdown[ ,1]
View(markdown)
markdown <- as.vector(markdown$n)
View(web.programming)
command.line <- c(sum(survey.data$Command.Line.Experience == "Expert user"),
sum(survey.data$Command.Line.Experience == "Intermediate user"),
sum(survey.data$Command.Line.Experience == "Used it a few times"),
sum(survey.data$Command.Line.Experience == "Never used it"))
# Version.Control.Experience
version.control <- c(sum(survey.data$Version.Control.Experience == "Expert user"),
sum(survey.data$Version.Control.Experience == "Intermediate user"),
sum(survey.data$Version.Control.Experience == "Used it a few      times"),
sum(survey.data$Version.Control.Experience == "Never used it"))
# Markdown.Experience
markdown <- c(sum(survey.data$Markdown.Experience == "Expert user"),
sum(survey.data$Markdown.Experience == "Intermediate user"),
sum(survey.data$Markdown.Experience == "Used it a few times"),
sum(survey.data$Markdown.Experience == "Never used it"))
# R.Language.Experience
r.language <- c(sum(survey.data$R.Language.Experience == "Expert user"),
sum(survey.data$R.Language.Experience == "Intermediate user"),
sum(survey.data$R.Language.Experience == "Used it a few times"),
sum(survey.data$R.Language.Experience == "Never used it"))
# Web.Programming.Experience
web.programming <- c(sum(survey.data$Web.Programming.Experience == "Expert user"),
sum(survey.data$Web.Programming.Experience == "Intermediate user"),
sum(survey.data$Web.Programming.Experience == "Used it a few times"),
sum(survey.data$Web.Programming.Experience == "Never used it"))
View(survey.data)
Experiences <- c("Expert user", "Intermediate user", "Used it a few times", "Never used it")
tech.experience <- data.frame(Experiences, command.line, version.control, markdown, r.language, web.programming)
View(tech.experience)
kable(tech.experience)
library(knitr)
kable(tech.experience)
colnames(tech.experience) <- c("Experiences", "Command Line", "Version Control", "Markdown", "R Language", "Web Programming")
kable(tech.experience)
#contributors <- c("Kyle Simpson", "Sojin Park", "Taehyun Kwon", "Mitesh Goyal")
install.packages("tidyverse")
library(tidyverse)
library(knitr)
# Store the given data into a variable (re-read multiple times so each contributor can have their own copy)
survey.data <- read.csv("./data/intro-survey.csv", stringsAsFactors = FALSE)
# View(survey.data)
install.packages("tidyverse")
#contributors <- c("Kyle Simpson", "Sojin Park", "Taehyun Kwon", "Mitesh Goyal")
#install.packages("tidyverse")
library(tidyverse)
library(knitr)
# Store the given data into a variable (re-read multiple times so each contributor can have their own copy)
survey.data <- read.csv("./data/intro-survey.csv", stringsAsFactors = FALSE)
# View(survey.data)
install.packages("shiny")
library("shiny")
my.ui <- fluidPage(
h1("Hello Shiny"),
textInput('user.name', label = "what is your name?")
)
library("shiny")
shinyApp(ui = my.ui, server = my.server)
my.server <- function(input, output) {
}
my.ui <- fluidPage(
h1("Hello Shiny"),
textInput('user.name', label = "What is your name?")
)
shinyApp(ui = my.ui, server = my.server)
shiny::runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
my.ui <- fluidPage(
titlePanel("Iris Dataset"),
# loading sidebar layout to add better legibility with side and main panel.
sidebarLayout(
# Sidebar section for description and explaination
sidebarPanel (
h3("Table of the iris data"),
p(strong("Type"), "the name of the iris species you want to look at this ")
),
# Main panel section for actual data and visualization.
mainPanel(
# enable inputting text to determine what data to look for
textInput('iris.name', label="Type the name of the iris species"),
# dataTableOutput to show iris table
dataTableOutput('iris.table')
)
)
)
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
paste0(input$iris.parts,".Length")
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
rsconnect::setAccountInfo(name='thwls3310', token='B3764F92FFC9660EF0FA5A806FCE50DD', secret='9x+UJPy3XWCNMU1CWdSbCivuvGXFZJ3pKx/HboOS')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/a8-data-app-thwls3310')
runApp('C:/Users/thwls/Desktop/Info201/Coffe-Lovers')
total.production <- read.csv("./data/clean1a-TotalProduction.csv", stringsAsFactors = FALSE)
setwd("C:/Users/thwls/Desktop/Info201/Coffe-Lovers")
total.production <- read.csv("./data/clean1a-TotalProduction.csv", stringsAsFactors = FALSE)
grower.prices <- read.csv("./data/clean3a-PricesPaidToGrowers.csv", stringsAsFactors = FALSE)
retail.prices <- read.csv("./data/clean3b-RetailPrices.csv", stringsAsFactors = FALSE)
consumption <- read.csv("./data/clean4b-Consumption.csv", stringsAsFactors = FALSE)
View(grower.prices)
setwd("C:/Users/thwls/Desktop/Info201/Coffe-Lovers")
runApp()
runApp()
View(retail.prices)
runApp()
runApp()
runApp()
View(grower.prices)
runApp()
runApp()
grower.country <- grower.prices[1:44]
runApp()
runApp()
runApp()
runApp()
grower.country <- grower.prices[-c(45)]
View(grower.country)
grower.country <- grower.prices[-c(1:44)]
grower.country <- grower.prices[c(1:44)]
grower.country <- grower.prices[-45,]
View(grower.country)
runApp()
View(grower.country)
runApp()
